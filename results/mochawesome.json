{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2025-06-25T12:13:07.022Z",
    "end": "2025-06-25T12:13:09.813Z",
    "duration": 2791,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "83ce6a13-8031-4472-86c9-15bd06d8e80e",
      "title": "",
      "fullFile": "cypress/e2e/petstore/store.cy.ts",
      "file": "cypress/e2e/petstore/store.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "00c78793-f569-4b5b-837c-c359809083c2",
          "title": "Petstore Store API Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get pet inventories by status",
              "fullTitle": "Petstore Store API Tests should get pet inventories by status",
              "timedOut": null,
              "duration": 1227,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n    method: 'GET',\n    url: 'https://petstore.swagger.io/v2/store/inventory',\n    failOnStatusCode: false\n}).then(response => {\n    if (response.status === 503) {\n        cy.log('Service temporarily unavailable, skipping test');\n        return;\n    }\n    expect(response.status).to.equal(200);\n    expect(response.body).to.be.an('object');\n    // Verify that inventory data is returned\n    expect(response.body).to.have.property('available');\n    expect(response.body).to.have.property('pending');\n    expect(response.body).to.have.property('sold');\n});",
              "err": {},
              "uuid": "6618c197-eaa4-432b-89c0-f1727caf7df3",
              "parentUUID": "00c78793-f569-4b5b-837c-c359809083c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new order",
              "fullTitle": "Petstore Store API Tests should create a new order",
              "timedOut": null,
              "duration": 292,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testOrder = {\n    id: 0, // Let the server assign the ID\n    petId: 1001,\n    quantity: 1,\n    shipDate: new Date().toISOString(),\n    status: 'placed',\n    complete: true\n};\ncy.request({\n    method: 'POST',\n    url: 'https://petstore.swagger.io/v2/store/order',\n    body: testOrder,\n    failOnStatusCode: false\n}).then(response => {\n    if (response.status === 503) {\n        cy.log('Service temporarily unavailable, skipping test');\n        return;\n    }\n    expect(response.status).to.equal(200);\n    expect(response.body).to.have.property('id');\n    expect(response.body.petId).to.equal(testOrder.petId);\n    expect(response.body.quantity).to.equal(testOrder.quantity);\n    expect(response.body.status).to.equal(testOrder.status);\n    expect(response.body.complete).to.equal(testOrder.complete);\n    // Store the created order ID for subsequent tests\n    createdOrderId = response.body.id;\n});",
              "err": {},
              "uuid": "87b38bbf-360c-4ac2-bcd4-120e2a4cc071",
              "parentUUID": "00c78793-f569-4b5b-837c-c359809083c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get order by ID",
              "fullTitle": "Petstore Store API Tests should get order by ID",
              "timedOut": null,
              "duration": 349,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// First create an order to ensure we have a valid ID\nconst testOrder = {\n    id: 0,\n    petId: 1002,\n    quantity: 2,\n    shipDate: new Date().toISOString(),\n    status: 'placed',\n    complete: false\n};\ncy.request({\n    method: 'POST',\n    url: 'https://petstore.swagger.io/v2/store/order',\n    body: testOrder,\n    failOnStatusCode: false\n}).then(createResponse => {\n    if (createResponse.status === 503) {\n        cy.log('Service temporarily unavailable, skipping test');\n        return;\n    }\n    const orderId = createResponse.body.id;\n    // Check if the order ID is valid (not an extremely large number)\n    if (orderId && orderId < 1000000) {\n        // Now get the order by ID\n        cy.request({\n            method: 'GET',\n            url: `https://petstore.swagger.io/v2/store/order/${orderId}`,\n            failOnStatusCode: false\n        }).then(getResponse => {\n            if (getResponse.status === 503) {\n                cy.log('Service temporarily unavailable, skipping test');\n                return;\n            }\n            expect(getResponse.status).to.equal(200);\n            expect(getResponse.body.id).to.equal(orderId);\n            expect(getResponse.body.petId).to.equal(testOrder.petId);\n            expect(getResponse.body.quantity).to.equal(testOrder.quantity);\n            expect(getResponse.body.status).to.equal(testOrder.status);\n            expect(getResponse.body.complete).to.equal(testOrder.complete);\n        });\n    }\n    else {\n        // If the order ID is invalid, skip this test\n        cy.log('Skipping get order test due to invalid order ID returned by API');\n    }\n});",
              "err": {},
              "uuid": "9c725f03-b1ae-47ae-a69f-e9251e49b43d",
              "parentUUID": "00c78793-f569-4b5b-837c-c359809083c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete an existing order",
              "fullTitle": "Petstore Store API Tests should delete an existing order",
              "timedOut": null,
              "duration": 290,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// First create an order to delete\nconst testOrder = {\n    id: 0,\n    petId: 1003,\n    quantity: 1,\n    shipDate: new Date().toISOString(),\n    status: 'placed',\n    complete: true\n};\ncy.request({\n    method: 'POST',\n    url: 'https://petstore.swagger.io/v2/store/order',\n    body: testOrder,\n    failOnStatusCode: false\n}).then(createResponse => {\n    if (createResponse.status === 503) {\n        cy.log('Service temporarily unavailable, skipping test');\n        return;\n    }\n    const orderId = createResponse.body.id;\n    // Check if the order ID is valid (not an extremely large number)\n    if (orderId && orderId < 1000000) {\n        // Now delete the order\n        cy.request({\n            method: 'DELETE',\n            url: `https://petstore.swagger.io/v2/store/order/${orderId}`,\n            failOnStatusCode: false\n        }).then(deleteResponse => {\n            if (deleteResponse.status === 503) {\n                cy.log('Service temporarily unavailable, skipping test');\n                return;\n            }\n            expect(deleteResponse.status).to.equal(200);\n            // Verify the order is actually deleted by trying to get it\n            cy.request({\n                method: 'GET',\n                url: `https://petstore.swagger.io/v2/store/order/${orderId}`,\n                failOnStatusCode: false\n            }).then(getResponse => {\n                if (getResponse.status === 503) {\n                    cy.log('Service temporarily unavailable, skipping verification');\n                    return;\n                }\n                expect(getResponse.status).to.equal(404);\n            });\n        });\n    }\n    else {\n        // If the order ID is invalid, skip this test\n        cy.log('Skipping delete order test due to invalid order ID returned by API');\n    }\n});",
              "err": {},
              "uuid": "c5202f44-9c91-45a9-abd6-ef2898fb1eba",
              "parentUUID": "00c78793-f569-4b5b-837c-c359809083c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 when getting non-existent order",
              "fullTitle": "Petstore Store API Tests should return 404 when getting non-existent order",
              "timedOut": null,
              "duration": 285,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nonExistentOrderId = 999999;\ncy.request({\n    method: 'GET',\n    url: `https://petstore.swagger.io/v2/store/order/${nonExistentOrderId}`,\n    failOnStatusCode: false\n}).then(response => {\n    if (response.status === 503) {\n        cy.log('Service temporarily unavailable, skipping test');\n        return;\n    }\n    expect(response.status).to.equal(404);\n    expect(response.body).to.have.property('code');\n    expect(response.body).to.have.property('type');\n    expect(response.body).to.have.property('message');\n});",
              "err": {},
              "uuid": "03b404da-53e1-4d01-8102-92c76757c6e8",
              "parentUUID": "00c78793-f569-4b5b-837c-c359809083c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 when deleting non-existent order",
              "fullTitle": "Petstore Store API Tests should return 404 when deleting non-existent order",
              "timedOut": null,
              "duration": 284,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nonExistentOrderId = 999999;\ncy.request({\n    method: 'DELETE',\n    url: `https://petstore.swagger.io/v2/store/order/${nonExistentOrderId}`,\n    failOnStatusCode: false\n}).then(response => {\n    if (response.status === 503) {\n        cy.log('Service temporarily unavailable, skipping test');\n        return;\n    }\n    expect(response.status).to.equal(404);\n    expect(response.body).to.have.property('code');\n    expect(response.body).to.have.property('type');\n    expect(response.body).to.have.property('message');\n});",
              "err": {},
              "uuid": "48376d5b-6a17-4c11-93f3-c791d547b7a9",
              "parentUUID": "00c78793-f569-4b5b-837c-c359809083c2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6618c197-eaa4-432b-89c0-f1727caf7df3",
            "87b38bbf-360c-4ac2-bcd4-120e2a4cc071",
            "9c725f03-b1ae-47ae-a69f-e9251e49b43d",
            "c5202f44-9c91-45a9-abd6-ef2898fb1eba",
            "03b404da-53e1-4d01-8102-92c76757c6e8",
            "48376d5b-6a17-4c11-93f3-c791d547b7a9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2727,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "results",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}