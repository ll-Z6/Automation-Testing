{
  "stats": {
    "suites": 4,
    "tests": 16,
    "passes": 16,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 16,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2025-06-25T12:13:07.022Z",
    "end": "2025-06-25T12:13:23.773Z",
    "duration": 16751
  },
  "results": [
    {
      "uuid": "fa03b970-b9b2-4e64-94e4-d12b0bf940c3",
      "title": "",
      "fullFile": "cypress/e2e/saucedemo/checkout.cy.ts",
      "file": "cypress/e2e/saucedemo/checkout.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1c486c3e-c337-4f88-b9d3-479f7d7c5ba5",
          "title": "SauceDemo Checkout Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should complete checkout process",
              "fullTitle": "SauceDemo Checkout Tests should complete checkout process",
              "timedOut": null,
              "duration": 2942,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('[data-test=\"checkout\"]').click();\ncy.fillCheckoutInfo('John', 'Doe', '12345');\ncy.get('[data-test=\"continue\"]').click();\ncy.get('[data-test=\"finish\"]').click();\ncy.get('.complete-header').should('contain', 'Thank you for your order!');",
              "err": {},
              "uuid": "da6dd8c6-102e-4009-826f-a4114f0c1240",
              "parentUUID": "1c486c3e-c337-4f88-b9d3-479f7d7c5ba5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate required fields",
              "fullTitle": "SauceDemo Checkout Tests should validate required fields",
              "timedOut": null,
              "duration": 1322,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('[data-test=\"checkout\"]').click();\ncy.get('[data-test=\"continue\"]').click();\ncy.get('[data-test=\"error\"]').should('contain', 'First Name is required');",
              "err": {},
              "uuid": "7d85550e-cd22-412d-b4a6-d30a93c14e1c",
              "parentUUID": "1c486c3e-c337-4f88-b9d3-479f7d7c5ba5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "da6dd8c6-102e-4009-826f-a4114f0c1240",
            "7d85550e-cd22-412d-b4a6-d30a93c14e1c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4264,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "b726f6c1-28da-4271-b046-d4f74892e172",
      "title": "",
      "fullFile": "cypress/e2e/saucedemo/login.cy.ts",
      "file": "cypress/e2e/saucedemo/login.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "57813e0a-d5ca-40d1-89a1-be4b0e65f35d",
          "title": "SauceDemo Login Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should display login page elements",
              "fullTitle": "SauceDemo Login Tests should display login page elements",
              "timedOut": null,
              "duration": 443,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('[data-test=\"username\"]').should('be.visible');\ncy.get('[data-test=\"password\"]').should('be.visible');\ncy.get('[data-test=\"login-button\"]').should('be.visible');",
              "err": {},
              "uuid": "348c9abf-aa38-4d07-9b88-7cb0be281c2e",
              "parentUUID": "57813e0a-d5ca-40d1-89a1-be4b0e65f35d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should login with valid credentials (Happy Path)",
              "fullTitle": "SauceDemo Login Tests should login with valid credentials (Happy Path)",
              "timedOut": null,
              "duration": 776,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.login('standard_user', 'secret_sauce');\ncy.url().should('include', '/inventory.html');\ncy.get('.inventory_list').should('be.visible');",
              "err": {},
              "uuid": "1c7cb323-b47a-4de7-bd1a-d3f0a239e5ea",
              "parentUUID": "57813e0a-d5ca-40d1-89a1-be4b0e65f35d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should display error with invalid credentials (Sad Path)",
              "fullTitle": "SauceDemo Login Tests should display error with invalid credentials (Sad Path)",
              "timedOut": null,
              "duration": 981,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.login('invalid_user', 'wrong_password');\ncy.get('[data-test=\"error\"]').should('be.visible').and('contain', 'Username and password do not match');",
              "err": {},
              "uuid": "7f55405d-8e84-4abc-aa0e-4684a8f5a78a",
              "parentUUID": "57813e0a-d5ca-40d1-89a1-be4b0e65f35d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should lock out locked user",
              "fullTitle": "SauceDemo Login Tests should lock out locked user",
              "timedOut": null,
              "duration": 787,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.login('locked_out_user', 'secret_sauce');\ncy.get('[data-test=\"error\"]').should('contain', 'Epic sadface: Sorry, this user has been locked out.');",
              "err": {},
              "uuid": "aaa31127-f5c8-4d7e-a97b-612a68060d29",
              "parentUUID": "57813e0a-d5ca-40d1-89a1-be4b0e65f35d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "348c9abf-aa38-4d07-9b88-7cb0be281c2e",
            "1c7cb323-b47a-4de7-bd1a-d3f0a239e5ea",
            "7f55405d-8e84-4abc-aa0e-4684a8f5a78a",
            "aaa31127-f5c8-4d7e-a97b-612a68060d29"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2987,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "7b06e981-02b8-4ee4-8e2c-db32b815b128",
      "title": "",
      "fullFile": "cypress/e2e/saucedemo/products.cy.ts",
      "file": "cypress/e2e/saucedemo/products.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "314d4387-cf11-443f-8102-05bc123903ef",
          "title": "SauceDemo Products Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should display products correctly",
              "fullTitle": "SauceDemo Products Tests should display products correctly",
              "timedOut": null,
              "duration": 1135,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('.inventory_item').should('have.length', 6);",
              "err": {},
              "uuid": "851c4a2d-0e8e-42a2-a9b6-799ceaae9cca",
              "parentUUID": "314d4387-cf11-443f-8102-05bc123903ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should sort products by price low to high",
              "fullTitle": "SauceDemo Products Tests should sort products by price low to high",
              "timedOut": null,
              "duration": 886,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('.product_sort_container').select('lohi');\ncy.get('.inventory_item_price').then($prices => {\n    const prices = $prices.map((_, el) => parseFloat(el.innerText.replace('$', ''))).get();\n    const sortedPrices = [...prices].sort((a, b) => a - b);\n    expect(prices).to.deep.equal(sortedPrices);\n});",
              "err": {},
              "uuid": "def12357-2e19-4193-94cc-a0fa482b0549",
              "parentUUID": "314d4387-cf11-443f-8102-05bc123903ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add product to cart",
              "fullTitle": "SauceDemo Products Tests should add product to cart",
              "timedOut": null,
              "duration": 1053,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.addToCart('Sauce Labs Backpack');\ncy.get('.shopping_cart_badge').should('contain', '1');\ncy.get('[data-test=\"remove-sauce-labs-backpack\"]').should('be.visible');",
              "err": {},
              "uuid": "c877456e-6663-46be-a629-e61896783a10",
              "parentUUID": "314d4387-cf11-443f-8102-05bc123903ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove product from cart and update cart count",
              "fullTitle": "SauceDemo Products Tests should remove product from cart and update cart count",
              "timedOut": null,
              "duration": 905,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.addToCart('Sauce Labs Backpack');\ncy.get('.shopping_cart_badge').should('contain', '1');\ncy.get('[data-test=\"remove-sauce-labs-backpack\"]').click();\ncy.get('.shopping_cart_badge').should('not.exist');\ncy.get('[data-test=\"add-to-cart-sauce-labs-backpack\"]').should('be.visible');",
              "err": {},
              "uuid": "c3d9f4e8-3fc0-4985-8771-19f04be947c4",
              "parentUUID": "314d4387-cf11-443f-8102-05bc123903ef",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "851c4a2d-0e8e-42a2-a9b6-799ceaae9cca",
            "def12357-2e19-4193-94cc-a0fa482b0549",
            "c877456e-6663-46be-a629-e61896783a10",
            "c3d9f4e8-3fc0-4985-8771-19f04be947c4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3979,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "83ce6a13-8031-4472-86c9-15bd06d8e80e",
      "title": "",
      "fullFile": "cypress/e2e/petstore/store.cy.ts",
      "file": "cypress/e2e/petstore/store.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "00c78793-f569-4b5b-837c-c359809083c2",
          "title": "Petstore Store API Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get pet inventories by status",
              "fullTitle": "Petstore Store API Tests should get pet inventories by status",
              "timedOut": null,
              "duration": 1227,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n    method: 'GET',\n    url: 'https://petstore.swagger.io/v2/store/inventory',\n    failOnStatusCode: false\n}).then(response => {\n    if (response.status === 503) {\n        cy.log('Service temporarily unavailable, skipping test');\n        return;\n    }\n    expect(response.status).to.equal(200);\n    expect(response.body).to.be.an('object');\n    // Verify that inventory data is returned\n    expect(response.body).to.have.property('available');\n    expect(response.body).to.have.property('pending');\n    expect(response.body).to.have.property('sold');\n});",
              "err": {},
              "uuid": "6618c197-eaa4-432b-89c0-f1727caf7df3",
              "parentUUID": "00c78793-f569-4b5b-837c-c359809083c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new order",
              "fullTitle": "Petstore Store API Tests should create a new order",
              "timedOut": null,
              "duration": 292,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testOrder = {\n    id: 0, // Let the server assign the ID\n    petId: 1001,\n    quantity: 1,\n    shipDate: new Date().toISOString(),\n    status: 'placed',\n    complete: true\n};\ncy.request({\n    method: 'POST',\n    url: 'https://petstore.swagger.io/v2/store/order',\n    body: testOrder,\n    failOnStatusCode: false\n}).then(response => {\n    if (response.status === 503) {\n        cy.log('Service temporarily unavailable, skipping test');\n        return;\n    }\n    expect(response.status).to.equal(200);\n    expect(response.body).to.have.property('id');\n    expect(response.body.petId).to.equal(testOrder.petId);\n    expect(response.body.quantity).to.equal(testOrder.quantity);\n    expect(response.body.status).to.equal(testOrder.status);\n    expect(response.body.complete).to.equal(testOrder.complete);\n    // Store the created order ID for subsequent tests\n    createdOrderId = response.body.id;\n});",
              "err": {},
              "uuid": "87b38bbf-360c-4ac2-bcd4-120e2a4cc071",
              "parentUUID": "00c78793-f569-4b5b-837c-c359809083c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get order by ID",
              "fullTitle": "Petstore Store API Tests should get order by ID",
              "timedOut": null,
              "duration": 349,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// First create an order to ensure we have a valid ID\nconst testOrder = {\n    id: 0,\n    petId: 1002,\n    quantity: 2,\n    shipDate: new Date().toISOString(),\n    status: 'placed',\n    complete: false\n};\ncy.request({\n    method: 'POST',\n    url: 'https://petstore.swagger.io/v2/store/order',\n    body: testOrder,\n    failOnStatusCode: false\n}).then(createResponse => {\n    if (createResponse.status === 503) {\n        cy.log('Service temporarily unavailable, skipping test');\n        return;\n    }\n    const orderId = createResponse.body.id;\n    // Check if the order ID is valid (not an extremely large number)\n    if (orderId && orderId < 1000000) {\n        // Now get the order by ID\n        cy.request({\n            method: 'GET',\n            url: `https://petstore.swagger.io/v2/store/order/${orderId}`,\n            failOnStatusCode: false\n        }).then(getResponse => {\n            if (getResponse.status === 503) {\n                cy.log('Service temporarily unavailable, skipping test');\n                return;\n            }\n            expect(getResponse.status).to.equal(200);\n            expect(getResponse.body.id).to.equal(orderId);\n            expect(getResponse.body.petId).to.equal(testOrder.petId);\n            expect(getResponse.body.quantity).to.equal(testOrder.quantity);\n            expect(getResponse.body.status).to.equal(testOrder.status);\n            expect(getResponse.body.complete).to.equal(testOrder.complete);\n        });\n    }\n    else {\n        // If the order ID is invalid, skip this test\n        cy.log('Skipping get order test due to invalid order ID returned by API');\n    }\n});",
              "err": {},
              "uuid": "9c725f03-b1ae-47ae-a69f-e9251e49b43d",
              "parentUUID": "00c78793-f569-4b5b-837c-c359809083c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete an existing order",
              "fullTitle": "Petstore Store API Tests should delete an existing order",
              "timedOut": null,
              "duration": 290,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// First create an order to delete\nconst testOrder = {\n    id: 0,\n    petId: 1003,\n    quantity: 1,\n    shipDate: new Date().toISOString(),\n    status: 'placed',\n    complete: true\n};\ncy.request({\n    method: 'POST',\n    url: 'https://petstore.swagger.io/v2/store/order',\n    body: testOrder,\n    failOnStatusCode: false\n}).then(createResponse => {\n    if (createResponse.status === 503) {\n        cy.log('Service temporarily unavailable, skipping test');\n        return;\n    }\n    const orderId = createResponse.body.id;\n    // Check if the order ID is valid (not an extremely large number)\n    if (orderId && orderId < 1000000) {\n        // Now delete the order\n        cy.request({\n            method: 'DELETE',\n            url: `https://petstore.swagger.io/v2/store/order/${orderId}`,\n            failOnStatusCode: false\n        }).then(deleteResponse => {\n            if (deleteResponse.status === 503) {\n                cy.log('Service temporarily unavailable, skipping test');\n                return;\n            }\n            expect(deleteResponse.status).to.equal(200);\n            // Verify the order is actually deleted by trying to get it\n            cy.request({\n                method: 'GET',\n                url: `https://petstore.swagger.io/v2/store/order/${orderId}`,\n                failOnStatusCode: false\n            }).then(getResponse => {\n                if (getResponse.status === 503) {\n                    cy.log('Service temporarily unavailable, skipping verification');\n                    return;\n                }\n                expect(getResponse.status).to.equal(404);\n            });\n        });\n    }\n    else {\n        // If the order ID is invalid, skip this test\n        cy.log('Skipping delete order test due to invalid order ID returned by API');\n    }\n});",
              "err": {},
              "uuid": "c5202f44-9c91-45a9-abd6-ef2898fb1eba",
              "parentUUID": "00c78793-f569-4b5b-837c-c359809083c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 when getting non-existent order",
              "fullTitle": "Petstore Store API Tests should return 404 when getting non-existent order",
              "timedOut": null,
              "duration": 285,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nonExistentOrderId = 999999;\ncy.request({\n    method: 'GET',\n    url: `https://petstore.swagger.io/v2/store/order/${nonExistentOrderId}`,\n    failOnStatusCode: false\n}).then(response => {\n    if (response.status === 503) {\n        cy.log('Service temporarily unavailable, skipping test');\n        return;\n    }\n    expect(response.status).to.equal(404);\n    expect(response.body).to.have.property('code');\n    expect(response.body).to.have.property('type');\n    expect(response.body).to.have.property('message');\n});",
              "err": {},
              "uuid": "03b404da-53e1-4d01-8102-92c76757c6e8",
              "parentUUID": "00c78793-f569-4b5b-837c-c359809083c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 when deleting non-existent order",
              "fullTitle": "Petstore Store API Tests should return 404 when deleting non-existent order",
              "timedOut": null,
              "duration": 284,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nonExistentOrderId = 999999;\ncy.request({\n    method: 'DELETE',\n    url: `https://petstore.swagger.io/v2/store/order/${nonExistentOrderId}`,\n    failOnStatusCode: false\n}).then(response => {\n    if (response.status === 503) {\n        cy.log('Service temporarily unavailable, skipping test');\n        return;\n    }\n    expect(response.status).to.equal(404);\n    expect(response.body).to.have.property('code');\n    expect(response.body).to.have.property('type');\n    expect(response.body).to.have.property('message');\n});",
              "err": {},
              "uuid": "48376d5b-6a17-4c11-93f3-c791d547b7a9",
              "parentUUID": "00c78793-f569-4b5b-837c-c359809083c2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6618c197-eaa4-432b-89c0-f1727caf7df3",
            "87b38bbf-360c-4ac2-bcd4-120e2a4cc071",
            "9c725f03-b1ae-47ae-a69f-e9251e49b43d",
            "c5202f44-9c91-45a9-abd6-ef2898fb1eba",
            "03b404da-53e1-4d01-8102-92c76757c6e8",
            "48376d5b-6a17-4c11-93f3-c791d547b7a9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2727,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "results",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}